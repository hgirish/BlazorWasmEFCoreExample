@using ContactsApp.BaseRepository
@using ContactsApp.Model
@using System.Security.Claims

@inject ClaimsPrincipal User 
@inject IBasicRepository<Contact> Repo
@inject NavigationManager Nav 
@inject IPageHelper PageHelper 

@if (Contact != null)
{
    <ContactForm Busy="@Busy"
                 Contact="@Contact"
                 IsAdd="true"
                 CancelRequest="Cancel"
                 ValidationResult="@(async (success) => await ValidationResultAsync(success))"
                 />
}
@if (Success)
{
    <br />
    <div class="alert alert-success">The contact was successfully added.</div>
}
@if (Error)
{
    <br />
    <div class="alert alert-danger">Failed to update the contact (@ErrorMessage).</div>
}

@code {


    /// <summary>
    /// New <see cref="Contact"/>.
    /// </summary>
    public Contact Contact { get; set; }

    /// <summary>
    /// Avoid concurrent requests.
    /// </summary>
    public bool Busy;

    /// <summary>
    /// Add was successful.
    /// </summary>
    public bool Success;

    /// <summary>
    /// Error resulted from save.
    /// </summary>
    public bool Error;

    /// <summary>
    /// The error message.
    /// </summary>
    public string ErrorMessage = string.Empty;

    /// <summary>
    /// Start with fresh contact.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    protected override Task OnInitializedAsync()
    {
        Contact = new Contact();
        return base.OnInitializedAsync();
    }

    /// <summary>
    /// Returns <c>true</c> if form was validated successfully.
    /// </summary>
    /// <param name="success"><c>True</c> when valid</param>
    /// <returns>A <see cref="Task"/>.</returns>
    public async Task ValidationResultAsync(bool success)
    {
        if (!success)
        {
            Success = false;
            Error = false;
            return;
        }

        Busy = true;

        try
        {
            Contact = await Repo.AddAsync(Contact, User);
            Success = true;
            Error = false;
            // ready for the next
            Contact = new Contact();
            Busy = false;
        }
        catch (Exception ex)
        {
            Success = false;
            Error = true;
            ErrorMessage = ex.Message;
            Busy = false;
        }
    }

    public void Cancel()
    {
        Nav.NavigateTo($"/{PageHelper.Page}");
    }

}
