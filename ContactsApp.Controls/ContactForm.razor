@using ContactsApp.Model
@using Microsoft.AspNetCore.Components.Forms

<h1>@Mode Contact </h1>
<hr />
@if (Contact != null)
{
    <EditForm Model="@Contact" OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
              OnValidSubmit="(async () => await  HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>
}
@code {

    /// <summary>
    /// Let parent handle result of validation.
    /// </summary>
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    /// <summary>
    /// Let parent handle what to do on cancel.
    /// </summary>
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    /// <summary>
    /// <c>True</c> if add mode.
    /// </summary>
    [Parameter]
    public bool IsAdd { get; set; }

    /// <summary>
    /// The <see cref="Contact"/> to upsert.
    /// </summary>
   [Parameter]
    public Contact Contact { get; set; }

    /// <summary>
    /// The database version of <see cref="Contact"/> if a concurrency issue
    /// exists.
    /// </summary>
  [Parameter]  public Contact DbContact { get; set; }

    /// <summary>
    /// Prevent multiple asynchronous operations at the same time.
    /// </summary>
   [Parameter] public bool Busy { get; set; }

    /// <summary>
    /// Mode.
    /// </summary>
    public string Mode => IsAdd ? "Add" : "Edit";

    /// <summary>
    /// Ask to cancel.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    public async Task CancelAsync()
    {
        await CancelRequest.InvokeAsync(null);
    }

    /// <summary>
    /// Handle form submission request.
    /// </summary>
    /// <param name="isValid"><c>True</c> when field validation passed.</param>
    /// <returns>A <see cref="Task"/>.</returns>
    public async Task HandleSubmitAsync(bool isValid)
    {
        await ValidationResult.InvokeAsync(isValid);
    }

}
